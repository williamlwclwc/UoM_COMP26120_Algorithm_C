A. Find the fixed point of an array

Solution1:
Algorithm fixedPoint(A,n)
    Input: An array A of distinct integers in ascending order. The number of integers in A is n
    Output: one position i in the list, such that A[i]=i, if any exists. Otherwise "No"
    flag <- 0
    for i <- 0 to n-1 do
        if A[i] = i then
            flag <- 1
            break
    if flag = 1 then
        return i
    else return No
Description for correctness: First, set a variable flag to note that whether it has found the fixed point or not, we set it 0 first.
                             Then, use a for loop to check the whole array whether i equals to A[i], if it equals, then set flag to be 1,
                             and break the loop, if not, continue the loop until it checks all the array. So in the end, check the flag
                             variable, if it is 1 means that it has found fixed point, so return the index i, if it is 0, then means it did not found the fixed
                             point, so the Output will be No.
Number of operations uses(worst case): 1+2(n-1)+1+1+1 = 2n+2

Solution2:
Algorithm fixedPoint_BinarySearch(A,n)
    Input: An array A of distinct integers in ascending order. The number of integers in A is n
    Output: one position i in the list, such that A[i]=i, if any exists. Otherwise "No"
    min <- 0
    max <- n-1
    while min <= max do
        mid <- (min + max) / 2 
        if A[mid] > mid then
            max <- mid - 1
        else if A[mid] < mid then
            min <- mid + 1
        else return mid
    return No
Description for correctness: Because the array is in ascending order, so when A[i] is larger than i, for the index that are bigger,
A[i] will always be larger than i, so we can cut off those, and for A[i] is smaller than i, it is the same. So we simply look the middle index each time, and we will cut off half
of the integers each time in the loop, and that will save a lot of time. To implement this algorithm, we set 2 boundaries-min&max,
and we use while loop until min is less or equal than max, mid is calculated by (min+max)/2, and if A[mid] is bigger, we changed the
max boundary to be mid-1, in order to cut off the bigger half, it is the same when A[mid] is smaller, and we changed the min boundary to
cut off the smaller half. If we can found a A[mid]=mid then we will return mid during the while loop, or we will return No at the end.
Number of operations uses(worst case): 2+8log2(n)+1 = 10log2(n)+3